
import sirepo.template.srw_debug

import numpy
import os
import srwpy.srwl_bl
import sys

from SRW_Parallel.SRW_Utilities import plot_SRW_intensity
from SRW_Parallel.Input_Decks.F2_Single_Magnet_Sim import (
    F2_Single_Magnet_Multiple_Color_Sim,
)

params = {
{{ dipoleList | indent(4) }}
    "beam_twiss": dict(
        _sig_e={{ electronBeam_rmsSpread }},
        _emit_x={{ electronBeam_horizontalEmittance * 1e-9 }},
        _beta_x={{ electronBeam_horizontalBeta }},
        _alpha_x={{ electronBeam_horizontalAlpha }},
        _eta_x={{ electronBeam_horizontalDispersion }},
        _eta_x_pr={{ electronBeam_horizontalDispersionDerivative }},
        _emit_y={{ electronBeam_verticalEmittance * 1e-9 }},
        _beta_y={{ electronBeam_verticalBeta }},
        _alpha_y={{ electronBeam_verticalAlpha }},
        _eta_y={{ electronBeam_verticalDispersion }},
        _eta_y_pr={{ electronBeam_verticalDispersionDerivative }},
    ),
    "int_type": {{ simulationSettings_characteristic }},
    "NN": {{ simulationSettings_nx }},
}


def run(beam_energy=0.330, sim_title="B1_and_B2", savedir="."):

    # Create the simulation
    first_edge_to_window = params[sim_title]["first_edge_to_window"]  # in meters
    secon_edge_to_window = params[sim_title]["secon_edge_to_window"]  # in meters

    magnets = sim_title.split("_")

    ###########
    # Create the simulation
    NN = params["NN"]
    wavelength = 400
    Lbend = 0.204  # Length of the magnet
    Ledge = 0.05  # Fall off in magnetic field as you exit 4-6
    Ne = params[sim_title]["Ne"]
    p = params[sim_title]["p"]
    windowToLen = params[sim_title]["windowToLen"]
    windowApp = params[sim_title]["windowApp"]

    a_sim = F2_Single_Magnet_Multiple_Color_Sim(
        Nx=NN,
        goal_Bend_Angle=params[sim_title]["bend_angle"]
        * params[sim_title]["mags"][0]
        * 180
        / numpy.pi,
        meshZ=first_edge_to_window,
        ph_lam=wavelength * 1e-9,
        L_bend=Lbend,
        L_edge=Ledge,
        beam_energy=beam_energy,
        Ne=Ne,
        p=p,
        beam_twiss=params["beam_twiss"],
    )
    a_sim.run_SR_calculation()
    a_sim.propagate_wavefront_through_window(appOne=windowApp, windowToLens=windowToLen)
    a_sim.resize_wavefront()

    b_sim = F2_Single_Magnet_Multiple_Color_Sim(
        Nx=NN,
        goal_Bend_Angle=params[sim_title]["bend_angle"]
        * params[sim_title]["mags"][1]
        * 180
        / numpy.pi,
        meshZ=secon_edge_to_window,
        ph_lam=wavelength * 1e-9,
        L_bend=Lbend,
        L_edge=Ledge,
        beam_energy=beam_energy,
        Ne=Ne,
        p=p,
        beam_twiss=params["beam_twiss"],
    )
    b_sim.run_SR_calculation()
    b_sim.propagate_wavefront_through_window(appOne=windowApp, windowToLens=windowToLen)
    b_sim.resize_wavefront()
    a_sim.add_wavefront(b_sim.wfr)
    srwpy.srwl_bl.SRWLBeamline().calc_int_from_wfr(
        a_sim.wfr,
        _pol=6,
        _int_type=params["int_type"],
        _fname=savedir + "/" + sim_title + "_intensity.dat",
        _pr=False,
    )


def main():
    for method in ["B1_and_B2", "B2_and_B3", "B3_and_B4"]:
        run(sim_title=method)


{% if rsoptRun %}
{{ rsoptRun }}
{% else %}
main()
{% endif %}
