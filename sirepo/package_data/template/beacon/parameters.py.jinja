
import sirepo.template.srw_debug

import json
import numpy
import os
import srwpy.srwl_bl
import sys

from SRW_Parallel.SRW_Utilities import plot_SRW_intensity
from SRW_Parallel.Input_Decks.F2_Single_Magnet_Sim import (
    F2_Single_Magnet_Multiple_Color_Sim,
)

params = {
{{ dipoleList | indent(4) }}
    "beam_twiss": dict(
        _sig_e={{ electronBeam_rmsSpread }},
        _emit_x={{ electronBeam_horizontalEmittance * 1e-9 }},
        _beta_x={{ electronBeam_horizontalBeta }},
        _alpha_x={{ electronBeam_horizontalAlpha }},
        _eta_x={{ electronBeam_horizontalDispersion }},
        _eta_x_pr={{ electronBeam_horizontalDispersionDerivative }},
        _emit_y={{ electronBeam_verticalEmittance * 1e-9 }},
        _beta_y={{ electronBeam_verticalBeta }},
        _alpha_y={{ electronBeam_verticalAlpha }},
        _eta_y={{ electronBeam_verticalDispersion }},
        _eta_y_pr={{ electronBeam_verticalDispersionDerivative }},
    ),
    "beam_offset": dict(
        _x0={{ electronBeam_horizontalPosition }},
        _xp0={{ electronBeam_horizontalAngle }},
        _y0={{ electronBeam_verticalPosition }},
        _yp0={{ electronBeam_verticalAngle }},
    ),
    "int_type": {{ simulationSettings_characteristic }},
    "NN": {{ simulationSettings_nx }},
    "beam_energy": {{ electronBeam_energy }},
    "beam_current": {{ electronBeam_current }},
}


def run(sim_title="B1_and_B2", savedir="."):
    sim_args = params[sim_title]

    ###########
    # Create the simulation
    NN = params["NN"]
    wavelength = 400
    Ne = sim_args["Ne"]
    p = sim_args["p"]

    a_mag = params["magnets"][sim_args["magnets"][0]]
    a_sim = F2_Single_Magnet_Multiple_Color_Sim(
        Nx=NN,
        goal_Bend_Angle=a_mag["bend_angle"] * 180 / numpy.pi,
        meshZ=sim_args["first_edge_to_window"],  # in meters
        ph_lam=wavelength * 1e-9,
        L_bend=a_mag["Lbend"],
        L_edge=a_mag["Ledge"],
        beam_energy=params["beam_energy"],
        beam_current=params["beam_current"],
        Ne=Ne,
        p=p,
        beam_twiss=params["beam_twiss"],
        beam_offset=params["beam_offset"],
    )
    a_sim.run_SR_calculation()
    a_sim.propagate_wavefront_through_window(
        appOne=sim_args["windowApp"],
        windowToLens=sim_args["windowToLen"],
        appOneX=sim_args["windowAppX"],
        appOneY=sim_args["windowAppY"],
        appCam=sim_args["appCam"],
        appCamX=sim_args["appCamX"],
        appCamY=sim_args["appCamY"],
        camFocalLength=sim_args["camFocalLength"],
    )
    a_sim.resize_wavefront()

    b_mag = params["magnets"][sim_args["magnets"][1]]
    b_sim = F2_Single_Magnet_Multiple_Color_Sim(
        Nx=NN,
        goal_Bend_Angle=b_mag["bend_angle"] * 180 / numpy.pi,
        meshZ=sim_args["second_edge_to_window"],  # in meters
        ph_lam=wavelength * 1e-9,
        L_bend=b_mag["Lbend"],
        L_edge=b_mag["Ledge"],
        beam_energy=params["beam_energy"],
        beam_current=params["beam_current"],
        Ne=Ne,
        p=p,
        beam_twiss=params["beam_twiss"],
        beam_offset=params["beam_offset"],
    )
    b_sim.run_SR_calculation()
    b_sim.propagate_wavefront_through_window(
        appOne=sim_args["windowApp"],
        windowToLens=sim_args["windowToLen"],
        appOneX=sim_args["windowAppX"],
        appOneY=sim_args["windowAppY"],
        appCam=sim_args["appCam"],
        appCamX=sim_args["appCamX"],
        appCamY=sim_args["appCamY"],
        camFocalLength=sim_args["camFocalLength"],
    )
    b_sim.resize_wavefront()
    a_sim.add_wavefront(b_sim.wfr)
    srwpy.srwl_bl.SRWLBeamline().calc_int_from_wfr(
        a_sim.wfr,
        _pol=6,
        _int_type=params["int_type"],
        _fname=savedir + "/" + sim_title + "_intensity.dat",
        _pr=False,
    )


def main():
{% if rsoptRun %}
    with open("config.json", "w", encoding="utf-8") as f:
        json.dump(params, f, ensure_ascii=False, indent=4)
{% endif %}
    for method in ["B1_and_B2", "B2_and_B3", "B3_and_B4"]:
        run(sim_title=method)


{% if rsoptRun %}
{{ rsoptRun }}
{% else %}
main()
{% endif %}
