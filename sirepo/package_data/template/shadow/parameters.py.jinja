# -*- python -*-
import math
import numpy
import Shadow
from Shadow.ShadowPreprocessorsXraylib import prerefl, pre_mlayer, bragg
from srxraylib.sources import srfunc

{% if simulation_sourceType == 'undulator' -%}
from orangecontrib.shadow.util.undulator.source_undulator import SourceUndulator
from syned.storage_ring.electron_beam import ElectronBeam
from syned.storage_ring.magnetic_structures.undulator import Undulator

# need to prime seed prior to calculate_rays SEED to get reproducible results
numpy.random.seed(1)

ebeam = ElectronBeam(
    energy_in_GeV={{ undulatorBeam_energy }},
    energy_spread={{ undulatorBeam_energy_spread }},
    current={{ undulatorBeam_current }},
    number_of_bunches={{ undulatorBeam_number_of_bunches }},
)
ebeam.set_twiss_all(
  {{ undulatorBeam_emittance_x }}, # emitx
  {{ undulatorBeam_alpha_x }}, # alphax
  {{ undulatorBeam_beta_x }}, # betax
  {{ undulatorBeam_eta_x }}, # etax
  {{ undulatorBeam_etap_x }}, # etapx
  {{ undulatorBeam_emittance_y }}, # emity
  {{ undulatorBeam_alpha_y }}, # alphay
  {{ undulatorBeam_beta_y }}, # betay
  {{ undulatorBeam_eta_y }}, # etay
  {{ undulatorBeam_etap_y }}, # etapy
)
sourceundulator = SourceUndulator(
    syned_electron_beam=ebeam,
    syned_undulator=Undulator(
        K_horizontal={{ undulator_k_horizontal }},
        K_vertical={{ undulator_k_vertical }},
        period_length={{ undulator_period }},
        number_of_periods={{ (undulator_length / undulator_period) | int }},
    ),
    flag_emittance=1,
    flag_size=1,
    # emin={{ undulator_emin }},
    # emax={{ undulator_emax }},
    # ng_e={{ undulator_ng_e }},
    # maxangle={{ undulator_maxangle }},
    ng_t={{ undulator_ng_t }},
    ng_p={{ undulator_ng_p }},
    ng_j={{ undulator_ng_j }},
    code_undul_phot="internal",
)

{% if undulator_select_energy == 'harmonic' %}
sourceundulator.set_energy_monochromatic_at_resonance({{ undulator_energy_harmonic }})
{% else %}
sourceundulator._EMIN = {{ undulator_emin }}
sourceundulator._EMAX = {{ undulator_emax }}
sourceundulator._NG_E = {{ undulator_ng_e }}
sourceundulator._MAXANGLE = {{ undulator_maxangle }}
{% endif %}

rays = sourceundulator.calculate_rays(
    user_unit_to_m=0.01,
    F_COHER={{ undulator_f_coher }},
    SEED={{ simulation_istar1 }},
    NRAYS={{ simulation_npoint }},
)
beam = Shadow.Beam(N=rays.shape[0])
beam.rays = rays
{% else %}
source = Shadow.Source()
beam = Shadow.Beam()

source.NPOINT = {{simulation_npoint}}
source.ISTAR1 = {{simulation_istar1}}

{% if simulation_sourceType == 'bendingMagnet' %}
{{bendingMagnetSettings}}
{% endif -%}

{% if simulation_sourceType == 'geometricSource' %}
{{geometricSourceSettings}}
{% endif -%}

{% if simulation_sourceType == 'wiggler' -%}
(traj, pars) = srfunc.wiggler_trajectory(
    b_from={{wiggler_b_from}},
    inData='{{wigglerTrajectoryInput}}',
    nPer={{wiggler_nPer}},
    nTrajPoints=501,
    ener_gev={{electronBeam_bener}},
    per={{wiggler_per}},
    kValue={{wiggler_kValue}},
    trajFile='tmp.traj',
    shift_x_flag={{wiggler_shift_x_flag}},
    shift_x_value={{wiggler_shift_x_value}},
    shift_betax_flag={{wiggler_shift_betax_flag}},
    shift_betax_value={{wiggler_shift_betax_value}},
)
srfunc.wiggler_cdf(
    traj,
    enerMin={{wiggler_ph1}},
    enerMax={{wiggler_ph2}},
    enerPoints=1001,
    outFile='{{wigglerTrajectoryFilename}}',
    elliptical=False)
{{wigglerSettings}}
{% endif -%}

source.F_BOUND_SOUR = {{rayFilter_f_bound_sour}}
{% if rayFilter_f_bound_sour == '2' %}
fn = b'source-aperture.dat'
with open(fn, 'w') as f:
  f.write(' {{rayFilter_distance}} {{rayFilter_x1}} {{rayFilter_x2}} {{rayFilter_z1}} {{rayFilter_z2}}')
source.FILE_BOUND = fn
source.NTOTALPOINT = 10000000
{% endif -%}

beam.genSource(source)

{% endif -%}

{% if distanceFromSource and distanceFromSource != 0 %}
beam.retrace({{distanceFromSource}})
{% endif -%}

{%- if beamlineOptics %}
{{beamlineOptics}}
{% endif -%}

beam.write('{{shadowOutputFile}}')
