

{% if simulationSettings_space_charge == '2d-open-hockney' %}
collective = synergia.collective.Space_charge_2d_open_hockney(
    synergia.utils.Commxx(True),
    [32, 32, 32] # grid
)
{% elif simulationSettings_space_charge == '2d-bassetti_erskine' %}
collective = synergia.collective.Space_charge_2d_bassetti_erskine()
collective.set_longitudinal(0)
{% elif simulationSettings_space_charge == '2d-kv' %}
collective = synergia.collective.Space_charge_2d_kv()
{% elif simulationSettings_space_charge == '3d-open-hockney' %}
collective = synergia.collective.Space_charge_3d_open_hockney(
    synergia.utils.Commxx(True),
    [32, 32, 32] # grid
)
{% else %}
collective = synergia.simulation.Dummy_collective_operator("stub")
{% endif %}


stepper = synergia.simulation.Split_operator_stepper_elements(
    synergia.lattice.MadX_reader().get_lattice('{{ use_beamline }}', LATTICE_FILE),
    1, # map_order
    collective,
    {{ simulationSettings_steps_per_element }} # num_steps
)

#TODO: don't copy this from bunch.py.jinja
bunch = synergia.optics.generate_matched_bunch_transverse(
    stepper.get_lattice_simulator(),
    emit_x={{ bunch_emit_x }}, # m-rad, RMS
    emit_y={{ bunch_emit_y }}, # m-rad, RMS
    rms_z={{ bunch_rms_z }}, # z bunch size
    dpop={{ bunch_dpop }}, # unitless, RMS \frac{\delta p}{p_{tot}}
    num_real_particles=int({{ bunch_num_real_particles }}), # real particles, used for space charge, impedance, etc
    num_macro_particles=int({{ bunch_num_macro_particles }}), # Used for PIC calculations
    seed=int({{ bunch_seed }}),
    z_period_length={{ bunch_z_period_length }} # space between bunches
)

bunch_simulator = synergia.simulation.Bunch_simulator(bunch)
bunch_simulator.add_per_step(synergia.bunch.Diagnostics_full2("diagnostics.h5"))
bunch_simulator.add_per_turn(synergia.bunch.Diagnostics_particles("particles.h5"), 10)

synergia.simulation.Propagator(stepper).propagate(
    bunch_simulator,
    {{ simulationSettings_turn_count }}, # number of turns plus my text
    0, # max_turns, Number of turns to run before writing checkpoint and stopping
       # When max_turns is 0, the simulation continues until the end.
    2, # verbosity
)
