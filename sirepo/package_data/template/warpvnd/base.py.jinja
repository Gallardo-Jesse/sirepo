from __future__ import absolute_import, division, print_function

import warpoptions
warpoptions.ignoreUnknownArgs = True

import sys
from warp import *
import numpy as np
import os

import rswarp
from warp.data_dumping.openpmd_diag import ParticleDiagnostic
from rswarp.diagnostics import FieldDiagnostic
from rswarp.cathode import sources
from rswarp.cathode import injectors

from scipy import constants
kb_eV = 8.6173324e-5 #Bolztmann constant in eV/K
kb_J = constants.k #Boltzmann constant in J/K

#-----

diagDir = 'diags/xzsolver/hdf5/'

#------

#GLOBAL GEOMETRY PARAMETERS FOR USERS
PLATE_SPACING = {{ simulationGrid_plate_spacing }}
CHANNEL_WIDTH = {{ simulationGrid_channel_width }} #width of simulation box
CHANNEL_HEIGHT = {{ simulationGrid_channel_height }}

#Dimensions
X_MAX = CHANNEL_WIDTH*0.5
X_MIN = -1.*X_MAX
Y_MAX = CHANNEL_HEIGHT*0.5
Y_MIN = -1.*Y_MAX
Z_MIN = 0.
Z_MAX = PLATE_SPACING

#Grid parameters
NUM_X = {{ simulationGrid_num_x }}
NUM_Y = {{ simulationGrid_num_y }}
NUM_Z = {{ simulationGrid_num_z }}

#z step size
dz =  (Z_MAX - Z_MIN)/NUM_Z

#------

#Specify solver geometry
{% if is3D %}
w3d.solvergeom = w3d.XYZgeom
{% else %}
w3d.solvergeom = w3d.XZgeom
{% endif %}

# Set boundary conditions
# Longitudinal conditions overriden by conducting plates
w3d.bound0  = neumann
w3d.boundnz = dirichlet
w3d.boundxy = periodic
# Particles boundary conditions
top.pbound0  = absorb
top.pboundnz = absorb
top.pboundxy = periodic

# Set grid boundaries
w3d.xmmin = X_MIN
w3d.xmmax = X_MAX
if w3d.solvergeom == w3d.XYZgeom:
    w3d.ymmin = Y_MIN
    w3d.ymmax = Y_MAX
w3d.zmmin = 0.
w3d.zmmax = Z_MAX

# Set grid counts
w3d.nx = NUM_X
if w3d.solvergeom == w3d.XYZgeom:
    w3d.ny = NUM_Y
w3d.nz = NUM_Z

zmesh = np.linspace(0,Z_MAX,NUM_Z+1) #holds the z-axis grid points in an array

#------

#Cathode and anode settings
CATHODE_TEMP = {{ beam_cathode_temperature }} #cathode temperature in K
CATHODE_PHI = {{ beam_cathode_work_function }} #work function in eV
ANODE_WF = {{ beam_anode_work_function }}
GRID_BIAS = {{ beam_anode_voltage }} #voltage applied to any grid of electrodes

vacuum_level = CATHODE_PHI - ANODE_WF + GRID_BIAS

#compute beam cutoff velocity for time-step determinance
beam_beta = sources.compute_cutoff_beta(CATHODE_TEMP)

#Compute Child-Langmuir limit for this setup A/m^2
cl_limit = sources.cl_limit(CATHODE_PHI, ANODE_WF, GRID_BIAS, PLATE_SPACING)

#------

#INJECTION SPECIFICATION
USER_INJECT = {{ beam_currentMode }}

# --- Setup simulation species
beam = Species(type={{ beam_species }}, name='beam')

# --- Set basic beam parameters
SOURCE_RADIUS_1 = 0.5*CHANNEL_WIDTH #a0 parameter - X plane
SOURCE_RADIUS_2 = 0.5*CHANNEL_HEIGHT #b0 parameter - Y plane
Z_PART_MIN = dz/8. #starting particle z value


#Compute cathode area for geomtry-specific current calculations
if w3d.solvergeom == w3d.XYZgeom:
    #For 3D cartesion geometry only
    cathode_area = 4.*SOURCE_RADIUS_1*SOURCE_RADIUS_2
else:
    #Assume 2D XZ geometry
    cathode_area = 2.*SOURCE_RADIUS_1*1. # 1 m is the geometric factor scaling the plane of the ignorable coordinate

# If true, position and angle of injected particle are computed analytically rather than interpolated
# Can be false for all but C-L injection (inject=2)
w3d.l_inj_exact = False

#Specify particles to be injected each step
PTCL_PER_STEP = {{ simulationGrid_particles_per_step }}
top.npinject = PTCL_PER_STEP

# Set the top.linj_rectangle flag so that injection uses the same geometry
top.linj_rectangle = (w3d.solvergeom == w3d.XZgeom or w3d.solvergeom == w3d.XYZgeom)

#Determine an appropriate time step based upon estimated final velocity
vzfinal = sqrt(2.*abs(vacuum_level)*np.abs(beam.charge)/beam.mass)+beam_beta*constants.c
top.dt = dz/vzfinal

if vzfinal*top.dt > dz:
    print("Time step dt = {:.3e}s does not constrain motion to a single cell".format(top.dt))


{% if simulation_egun_mode == '1' %}

#specify thermal properties
beam.vthz     = np.sqrt(CATHODE_TEMP*kb_J/beam.mass)
beam.vthperp  = np.sqrt(CATHODE_TEMP*kb_J/beam.mass)
top.lhalfmaxwellinject = 1 #inject z velocities as half Maxwellian

top.inject = 1
top.npinject = min(1000, top.npinject)
beam.ibeam = sources.j_rd(CATHODE_TEMP, CATHODE_PHI) * cathode_area
beam.a0     = SOURCE_RADIUS_1
beam.b0     = SOURCE_RADIUS_2
beam.ap0      = .0e0
beam.bp0      = .0e0
w3d.l_inj_exact = True

#set the ssnpid
top.ssnpid = 1

{% else -%}

if USER_INJECT == 1:
    # Constant current density - beam transverse velocity fixed to zero, very small longitduinal velocity
{% if is3D %}
    #Set injection flag
    top.inject = 1              # 1 means constant; 2 means space-charge limited injection;# 6 means user-specified
    
    top.npinject = PTCL_PER_STEP
    
    USER_CURRENT = {{ beam_beam_current }}
    beam.ibeam = USER_CURRENT
    beam.a0     = SOURCE_RADIUS_1
    beam.b0     = SOURCE_RADIUS_2
    
    beam.ap0 = .0e0
    beam.bp0 = .0e0

    w3d.l_inj_exact = True
    
    # Specify thermal properties
    beam.vthz = np.sqrt(4. * kb_J / beam.mass)
    beam.vthperp = 0.0
    top.lhalfmaxwellinject = 1  # inject z velocities as half Maxwellian
{% else %}
    #Set injection flag
    top.inject = 6               # 1 means constant; 2 means space-charge limited injection;# 6 means user-specified

    USER_CURRENT = {{ beam_beam_current }}
    beam.ibeam = USER_CURRENT
    beam.a0     = SOURCE_RADIUS_1
    beam.b0     = SOURCE_RADIUS_2

    #sources.constant_current(beam, CHANNEL_WIDTH, Z_PART_MIN, ptcl_per_step)
    dz = (w3d.zmmax - w3d.zmmin) / w3d.nz
    myInjector = injectors.UserInjectors(beam, w3d, None, CATHODE_TEMP, CHANNEL_WIDTH, PTCL_PER_STEP, zmin_scale=dz/Z_PART_MIN)
    installuserinjection(myInjector.inject_constant)
{% endif %}

if USER_INJECT == 2:
{% if is3D %}
    CURRENT_MODIFIER = 0.5  # Factor to multiply CL current by when setting beam current
    # Constant current density - beam transverse velocity fixed to zero, very small longitduinal velocity

    # Set injection flag
    top.inject = 1  # 1 means constant; 2 means space-charge limited injection;# 6 means user-specified
    top.npinject = PTCL_PER_STEP

    #Compute Child-Langmuir limit for this setup A/m^2
    cl_limit = sources.cl_limit(CATHODE_PHI, ANODE_WF, GRID_BIAS, PLATE_SPACING)

    #Compute actual current for emitter area
    beam_current = cl_limit * cathode_area

    beam.ibeam = beam_current * CURRENT_MODIFIER

    beam.a0 = SOURCE_RADIUS_1
    beam.b0 = SOURCE_RADIUS_1
    beam.ap0 = .0e0
    beam.bp0 = .0e0

    w3d.l_inj_exact = True

    # Initial velocity settings (5% of c)
    vrms = np.sqrt(1 - 1 / (0.05 / 511e3 + 1) ** 2) * 3e8
    top.vzinject = vrms
{% else %}
    # space charge limited injection using Child-Langmuir computation of cold limit

    #Set injection flag
    top.inject = 2               # 1 means constant; 2 means space-charge limited injection;# 6 means user-specified

    beam_current = sources.cl_limit(CATHODE_PHI, ANODE_WF, GRID_BIAS, PLATE_SPACING)*cathode_area
    beam.ibeam = beam_current
    beam.a0     = SOURCE_RADIUS_1
    beam.b0     = SOURCE_RADIUS_2
    w3d.l_inj_exact = True
{% endif %}

elif USER_INJECT == 3:
{% if is3D %}
    # True Thermionic injection
    top.inject = 1

    # Set both beams to same npinject to keep weights the same
    beam.npinject = PTCL_PER_STEP

    w3d.l_inj_exact = True

    # Specify thermal properties
    beam.vthz = np.sqrt(CATHODE_TEMP * kb_J / beam.mass)
    beam.vthperp = np.sqrt(CATHODE_TEMP * kb_J / beam.mass)
    top.lhalfmaxwellinject = 1  # inject z velocities as half Maxwellian

    beam_current = sources.j_rd(CATHODE_TEMP, CATHODE_PHI) * cathode_area  # steady state current in Amps
    #print('beam current expected: {}, current density {}'.format(beam_current, beam_current / cathode_area))

    #Compute Child-Langmuir limit for this setup A/m^2
    cl_limit = sources.cl_limit(CATHODE_PHI, ANODE_WF, GRID_BIAS, PLATE_SPACING)
    jcl = cl_limit*cathode_area

    #print('child-langmuir  limit: {}, current density {}'.format(jcl, cl_limit))
    beam.ibeam = beam_current
    beam.a0 = SOURCE_RADIUS_1
    beam.b0 = SOURCE_RADIUS_1
    beam.ap0 = .0e0
    beam.bp0 = .0e0
{% else %}
    top.lambdarinject = 1.0
    top.inject = 4
    electric_field = {{ maxConductorVoltage }} / 4.495e-06
    delta_w = np.sqrt(constants.elementary_charge **3 * electric_field / (4 * np.pi * constants.epsilon_0))
    A0 = 1.20173e6
    rd_current = A0 * CATHODE_TEMP**2 * np.exp( - (CATHODE_PHI * constants.elementary_charge - delta_w) / (CATHODE_TEMP * constants.k)) * cathode_area
    electrons_per_second = rd_current / constants.elementary_charge
    electrons_per_step = electrons_per_second * top.dt
    
    beam.sw = electrons_per_step / PTCL_PER_STEP / 2.

    top.tempinject = CATHODE_TEMP
    top.workinject = np.asarray([[CATHODE_PHI * constants.elementary_charge]])
    top.npinject = 0
    top.lhalfmaxwellinject = 1
    beam.a0 = SOURCE_RADIUS_1
    beam.b0 = SOURCE_RADIUS_2
    beam.vthz = sqrt(CATHODE_TEMP * constants.k / beam.mass)
{% endif -%}

{% endif -%}

derivqty()

#------

# Set up fieldsolver
f3d.mgtol = 1e-6 # Multigrid solver convergence tolerance, in volts. 1 uV is default in Warp.
if w3d.solvergeom == w3d.XYZgeom:
    solverE = MultiGrid3D()
else:
    solverE = MultiGrid2D()
registersolver(solverE)

#------

# --- Emitter settings
extractor_voltage = vacuum_level
# --- Anode Location
zplate = Z_MAX # --- plate location

# Create source conductors
source = ZPlane(zcent=w3d.zmmin,zsign=-1.,voltage=0.)
installconductor(source, dfill=largepos)

# Create ground plate
plate = ZPlane(voltage=extractor_voltage, zcent=zplate)
installconductor(plate,dfill=largepos)

#####

{{ conductorLatticeAndParticleScraper }}

#------

particleperiod = {{ particlePeriod }}
particle_diagnostic_0 = ParticleDiagnostic(period = particleperiod, top = top, w3d = w3d,
                                           species = {species.name: species for species in listofallspecies},
                                           comm_world=comm_world, lparallel_output=False, write_dir = diagDir[:-5])
fieldperiod = {{ particlePeriod }}
efield_diagnostic_0 = FieldDiagnostic.ElectrostaticFields(solver=solverE, top=top, w3d=w3d, comm_world = comm_world,
                                                          period=fieldperiod)

installafterstep(particle_diagnostic_0.write)
installafterstep(efield_diagnostic_0.write)

#------
