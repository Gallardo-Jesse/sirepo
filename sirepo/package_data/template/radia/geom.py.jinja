from __future__ import absolute_import, division, print_function

import h5py
import re
from pykern.pkcollections import PKDict
from sirepo.template import radia_tk
from sirepo.template import radia_examples
from sirepo.template import template_common

VIEW_TYPE_OBJ = 'objects'
VIEW_TYPE_FIELD = 'fields'

_MODEL_BOX = 'box'
_MODEL_GROUP = 'geomGroup'
_MODEL_GROUP_UND = 'geomUndulatorGroup'
_MODEL_OBJECT = 'geomObject'
_GROUP_MODELS = (_MODEL_GROUP, _MODEL_GROUP_UND)
_OBJ_MODELS = (_MODEL_BOX, _MODEL_OBJECT)
_MODELS = (_MODEL_BOX, _MODEL_GROUP, _MODEL_GROUP_UND, _MODEL_OBJECT)

objs = []

def _split_comma_field(f, type):
    arr = re.split(r'\s*,\s*', f)
    if type == 'float':
        return [float(x) for x in arr]
    if type == 'int':
        return [int(x) for x in arr]
    return arr


def _add_object(o):
    if o.model == _MODEL_BOX:
        ctr = _split_comma_field(o.center, 'float')
        sz = _split_comma_field(o.size, 'float')
        m = _split_comma_field(o.magnetization, 'float')
        div = _split_comma_field(o.division, 'int') if o.doDivide else None
        g_id = radia_tk.build_box(ctr, sz, o.material, m, div)
    if o.model in _GROUP_MODELS:
        grp = []
        for obj_id in o.members:
            obj = {{ objects }}[obj_id]
            m = PKDict(obj)
            if m.mapId not in id_map:
                # have not added this yet
                grp.append(_add_object(m))
            else:
                grp.append(id_map[m.mapId] )
        g_id = radia_tk.build_container(grp)
    #r = radia_tk.apply_clone(g_id, 3, 'translate', PKDict(distance='15, 0, 0'), False)
    for transform in o.transforms:
        xform = PKDict(transform)
        print('XFORM {}'.format(xform))
        if xform.model == 'cloneTransform':
            #r = radia_tk.apply_clone(g_id, xform.numCopies + 1, xform.transform, xform.transformModel, xform.alternateFields)
            r = radia_tk.apply_clone(g_id, xform)
            print('XFORM {} RES {}'.format(g_id, r))
        if xform.model == 'symmetryTransform':
            radia_tk.apply_symmetry(
                g_id,
                xform.symmetryType,
                _split_comma_field(xform.symmetryPlane, 'float'),
                _split_comma_field(xform.symmetryPoint, 'float'),
            )

    if o.symmetryType is not 'none':
        radia_tk.apply_symmetry(
            g_id,
            o.symmetryType,
            _split_comma_field(o.symmetryPlane, 'float'),
            _split_comma_field(o.symmetryPoint, 'float'),
        )
    id_map[o.mapId] = g_id
    objs.append(g_id)
    return g_id

id_map = PKDict()
{% if isExample %}
g_id = radia_examples.build('{{ geomName }}')
{% else %}
for obj in {{ objects }}:
    o = PKDict(obj)
    if o.model not in _MODELS or o.mapId in id_map:
        continue
    g_id = _add_object(o)
    id_map[o.mapId] = g_id
    objs.append(g_id)
# put all objects in a container for now
g_id = radia_tk.build_container(objs)
{% endif %}


# always store the object and id map
g_data = radia_tk.geom_to_data(g_id, name='{{ geomName }}')
with h5py.File('{{ dataFile }}', 'a') as hf:
    template_common.dict_to_h5(g_data, hf, path='{{ h5ObjPath }}')
    template_common.dict_to_h5(id_map, hf, path='idMap')

{% if doSolve %}
res = radia_tk.solve(g_id, {{ solvePrec }}, {{ solveMaxIter }}, {{ solveMethod }})
with h5py.File('{{ dataFile }}', 'a') as hf:
    template_common.dict_to_h5(res, hf, path='solution')
{% endif %}

if '{{ viewType }}' == VIEW_TYPE_FIELD:
    f_type = '{{ fieldType }}'
    if f_type == radia_tk.FIELD_TYPE_MAG_M:
        f = radia_tk.get_magnetization(g_id)
    elif f_type in radia_tk.POINT_FIELD_TYPES:
        f = radia_tk.get_field(g_id, f_type, {{ fieldPoints }})
    g_data = radia_tk.vector_field_to_data(g_id, '{{ geomName }}', f, radia_tk.FIELD_UNITS[f_type])

    with h5py.File('{{ dataFile }}', 'a') as hf:
        template_common.dict_to_h5(g_data, hf, path='{{ h5FieldPath }}')


with open('{{ dmpFile }}', 'wb') as f:
    f.write(radia_tk.dump_bin(g_id))
