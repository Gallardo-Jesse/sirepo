from __future__ import absolute_import, division, print_function

import h5py
import os
import re
from pykern.pkcollections import PKDict
from sirepo.template import radia_examples


from sirepo.template import template_common

VIEW_TYPE_OBJ = 'objects'
VIEW_TYPE_FIELD = 'fields'

_MODEL_BOX = 'box'
_MODEL_GROUP = 'geomGroup'
_MODEL_GROUP_UND = 'geomUndulatorGroup'
_MODEL_OBJECT = 'geomObject'
_GROUP_MODELS = (_MODEL_GROUP, _MODEL_GROUP_UND)
_OBJ_MODELS = (_MODEL_BOX, _MODEL_OBJECT)
_MODELS = (_MODEL_BOX, _MODEL_GROUP, _MODEL_GROUP_UND, _MODEL_OBJECT)

radia_objs = []
sirepo_objs = {{ objects }}

def _hex_to_rgb(h_color):
    h = h_color.lstrip('#')
    return [c / 255.0 for c in tuple(int(h[i:i+2], 16) for i in (0, 2, 4))]


def _split_comma_field(f, type):
    arr = re.split(r'\s*,\s*', f)
    if type == 'float':
        return [float(x) for x in arr]
    if type == 'int':
        return [int(x) for x in arr]
    return arr

# include external files like radia_tk
{% include 'radia_tk.py' %}


def _add_object(o):
    if o.model == _MODEL_BOX:
        ctr = _split_comma_field(o.center, 'float')
        sz = _split_comma_field(o.size, 'float')
        m = _split_comma_field(o.magnetization, 'float')
        div = _split_comma_field(o.division, 'int') if o.doDivide != '0' else None
        g_id = build_box(ctr, sz, o.material, m, div, h_m_curve=o.h_m_curve)
        if o.color:
            apply_color(g_id, _hex_to_rgb(o.color))
    if o.model in _GROUP_MODELS:
        grp = []
        for obj_id in o.members:
            obj = [mobj for mobj in sirepo_objs if mobj['id'] == obj_id][0]
            m = PKDict(obj)
            if m.mapId not in id_map:
                # have not added this yet
                grp.append(_add_object(m))
            else:
                grp.append(id_map[m.mapId] )
        g_id = build_container(grp)
    for transform in o.transforms:
        apply_transform(g_id, PKDict(transform))
    id_map[o.mapId] = g_id
    radia_objs.append(g_id)
    return g_id

id_map = PKDict()
{% if isExample %}
g_id = radia_examples.build('{{ geomName }}')
{% elif dmpImportFile %}
if not os.path.isfile('{{ dmpFile }}'):
    with open('{{ dmpImportFile }}', 'rb') as f:
        b = f.read()
        g_id = radia_tk.load_bin(b)
{% else %}
for obj in sirepo_objs:
    o = PKDict(obj)
    if o.model not in _MODELS or o.mapId in id_map:
        continue
    g_id = _add_object(o)
    id_map[o.mapId] = g_id
    radia_objs.append(g_id)
# put all objects in a container for now
g_id = build_container(radia_objs)
{% endif %}


# always store the object and id map
g_data = geom_to_data(g_id, name='{{ geomName }}')
{% if not forExport %}
with h5py.File('{{ dataFile }}', 'a') as hf:
    template_common.dict_to_h5(g_data, hf, path='{{ h5ObjPath }}')
    template_common.dict_to_h5(id_map, hf, path='idMap')
{% endif %}

{% if doSolve %}
res = solve(g_id, {{ solvePrec }}, {{ solveMaxIter }}, {{ solveMethod }})
{% if not forExport %}
with h5py.File('{{ dataFile }}', 'a') as hf:
    template_common.dict_to_h5(res, hf, path='solution')
{% endif %}
{% endif %}

if '{{ viewType }}' == VIEW_TYPE_FIELD:
    f_type = '{{ fieldType }}'
    if f_type == FIELD_TYPE_MAG_M:
        f = get_magnetization(g_id)
    elif f_type in POINT_FIELD_TYPES:
        f = get_field(g_id, f_type, {{ fieldPoints }})
    g_data = vector_field_to_data(g_id, '{{ geomName }}', f, FIELD_UNITS[f_type])

{% if not forExport %}
    with h5py.File('{{ dataFile }}', 'a') as hf:
        template_common.dict_to_h5(g_data, hf, path='{{ h5FieldPath }}')

with open('{{ dmpFile }}', 'wb') as f:
    f.write(radia_tk.dump_bin(g_id))
{% endif %}