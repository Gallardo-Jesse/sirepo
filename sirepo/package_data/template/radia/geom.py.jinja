from __future__ import absolute_import, division, print_function

import h5py
import re
from pykern.pkcollections import PKDict
from sirepo.template import radia_tk
from sirepo.template import radia_examples
from sirepo.template import template_common

VIEW_TYPE_OBJ = 'objects'
VIEW_TYPE_FIELD = 'fields'

_OBJ_TYPE_BOX = 'box'
_OBJ_TYPE_GROUP = 'group'
_OBJ_TYPES = ('box', 'group',)

def _split_comma_field(f, type):
    arr = re.split(r'\s*,\s*', f)
    if type == 'float':
        return [float(x) for x in arr]
    if type == 'int':
        return [int(x) for x in arr]
    return arr

{% if isExample %}
g_id = radia_examples.build('{{ geomName }}')
{% else %}
# put all objects in a container for now
objs = []
id_map = PKDict()
for obj in {{ objects }}:
    o = PKDict(obj)
    if o.type not in _OBJ_TYPES:
        continue
    ctr = _split_comma_field(o.center, 'float')
    sz = _split_comma_field(o.size, 'float')
    m = _split_comma_field(o.magnetization, 'float')
    div = _split_comma_field(o.division, 'int') if o.doDivide else None
    if o.type == _OBJ_TYPE_BOX:
        g_id = radia_tk.build_box(ctr, sz, o.material, m, div)
    if o.symmetryType is not 'none':
        radia_tk.apply_symmetry(g_id, o.symmetryType, _split_comma_field(o.symmetryPlane, 'float'))
    id_map[o.mapId] = g_id
    objs.append(g_id)
g_id = radia_tk.build_container(objs)
{% endif %}


# always store the object and id map
g_data = radia_tk.geom_to_data(g_id, name='{{ geomName }}')
with h5py.File('{{ dataFile }}', 'a') as hf:
    template_common.dict_to_h5(g_data, hf, path='{{ h5ObjPath }}')
    template_common.dict_to_h5(id_map, hf, path='idMap')

{% if doSolve %}
res = radia_tk.solve(g_id, {{ solvePrec }}, {{ solveMaxIter }}, {{ solveMethod }})
with h5py.File('{{ dataFile }}', 'a') as hf:
    template_common.dict_to_h5(res, hf, path='solution')
{% endif %}

if '{{ viewType }}' == VIEW_TYPE_FIELD:
    f_type = '{{ fieldType }}'
    if f_type == radia_tk.FIELD_TYPE_MAG_M:
        f = radia_tk.get_magnetization(g_id)
    elif f_type in radia_tk.POINT_FIELD_TYPES:
        f = radia_tk.get_field(g_id, f_type, {{ fieldPoints }})
    g_data = radia_tk.vector_field_to_data(g_id, '{{ geomName }}', f, radia_tk.FIELD_UNITS[f_type])

    with h5py.File('{{ dataFile }}', 'a') as hf:
        template_common.dict_to_h5(g_data, hf, path='{{ h5FieldPath }}')


with open('{{ dmpFile }}', 'wb') as f:
    f.write(radia_tk.dump_bin(g_id))
