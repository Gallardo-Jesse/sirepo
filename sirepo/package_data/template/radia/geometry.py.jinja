from __future__ import absolute_import, division, print_function

import h5py
import os
import re
from pykern.pkcollections import PKDict
import sirepo.util
from sirepo.template import radia_examples
from sirepo.template import radia_tk
from sirepo.template import template_common

VIEW_TYPE_OBJ = 'objects'
VIEW_TYPE_FIELD = 'fields'

_MODEL_BOX = 'box'
_MODEL_GROUP = 'geomGroup'
_MODEL_GROUP_UND = 'geomUndulatorGroup'
_MODEL_OBJECT = 'geomObject'
_GROUP_MODELS = (_MODEL_GROUP, _MODEL_GROUP_UND)
_OBJ_MODELS = (_MODEL_BOX, _MODEL_OBJECT)
_MODELS = (_MODEL_BOX, _MODEL_GROUP, _MODEL_GROUP_UND, _MODEL_OBJECT)

#radia_objs = []
sirepo_objs = {{ objects }}


def _add_object(o, radia_objs, id_map):
    if o.model == _MODEL_BOX:
        ctr = sirepo.util.split_comma_delimited_string(o.center, float)
        sz = sirepo.util.split_comma_delimited_string(o.size, float)
        m = sirepo.util.split_comma_delimited_string(o.magnetization, float)
        div = sirepo.util.split_comma_delimited_string(o.division, int)
        g_id = radia_tk.build_cuboid(ctr, sz, o.material, m, o.remanentMag, div, h_m_curve=o.h_m_curve)
        if o.color:
            radia_tk.apply_color(
                g_id,
                [c / 255.0 for c in tuple(int(o.color.lstrip('#')[i:i+2], 16) for i in (0, 2, 4))]
            )
    if o.model in _GROUP_MODELS:
        grp = []
        for obj_id in o.members:
            obj = [mobj for mobj in sirepo_objs if mobj['id'] == obj_id][0]
            m = PKDict(obj)
            if m.id not in id_map.values():
                # have not added this object yet
                m_id = _add_object(m, radia_objs, id_map)
                grp.append(m_id)
            else:
                grp.extend(
                    [list(id_map.keys())[list(id_map.values()).index(v)] for v in id_map.values() if v == m.id]
                )
        g_id = radia_tk.build_container(grp)
    for transform in o.transforms:
        radia_tk.apply_transform(g_id, PKDict(transform))
    id_map[g_id] = o.id
    # don't add objects if they are already in a group
    if not o.groupId:
        radia_objs.append(g_id)
    return g_id


def _build_radia_geom():
    id_map = PKDict()
    radia_objs = []
{% if isExample %}
    g_id = radia_examples.EXAMPLES['{{ geomName }}']()
{% elif dmpImportFile %}
    with open('{{ dmpImportFile }}', 'rb') as f:
        b = f.read()
        g_id = radia_tk.load_bin(b)
{% else %}
    for obj in sirepo_objs:
        o = PKDict(obj)
        if o.model not in _MODELS or o.id in id_map.values():
            continue
        o_id = _add_object(o, radia_objs, id_map)
        id_map[o_id] = o.id
    g_id = radia_tk.build_container(radia_objs)
{% endif %}
    return g_id, id_map


def _do_solve(g_id, prec, max_iter, method):
    def solve():
        print(f'SOLVING GID {g_id}')
        return radia_tk.solve(g_id, prec, max_iter, method)
    return solve


def _radia_mpi(on_off):
    def r_mpi():
        print(f'SETTING RADIA MPI {on_off}')
        radia_tk.radia_mpi(on_off)
    return r_mpi


def _write_dmp(g_id):
    def w_d():
        print(f'WRTING DMP FOR {g_id}')
        with open('{{ dmpOutputFile }}', 'wb') as f:
            f.write(radia_tk.dump_bin(g_id))
    return w_d


def _write_geom(g_id, id_map):
    def w_g():
        print(f'WRTING GEOM FOR {g_id}')
        g_data = radia_tk.geom_to_data(g_id, name='{{ geomName }}')
        with h5py.File('{{ dataFile }}', 'a') as hf:
            template_common.dict_to_h5(g_data, hf, path='{{ h5ObjPath }}')
            template_common.dict_to_h5(id_map, hf, path='idMap')
    return w_g


def _write_fields(g_data):
    def w_f():
        print(f'WRTING FIELDS')
        with h5py.File('{{ dataFile }}', 'a') as hf:
            template_common.dict_to_h5(g_data, hf, path='{{ h5FieldPath }}')
    return w_f


def _write_solution(s):
    def w_s():
        print(f'WRITING SOL {s}')
        with h5py.File('{{ dataFile }}', 'a') as hf:
            template_common.dict_to_h5(s, hf, path='{{ h5SolutionPath }}')
    return w_s


def _run_fn(fn, run_once=True):
    c = None
    r = 0
    res = None
    try:
        import mpi4py.MPI
        if mpi4py.MPI.COMM_WORLD.Get_size() > 1:
            c = mpi4py.MPI.COMM_WORLD
            r = c.Get_rank()
    except Exception:
        pass
    if r == 0 or not run_once:
        print(f'RUNNING {fn.__name__} RANK {r}')
        try:
            res = fn()
        except Exception as e:
            print(f'{fn.__name__} RANK {r} GOT ERR {e}')
            if c:
                c.Abort(1)
            raise e
    else:
        print(f'{fn.__name__} SKIP FOR RANK {r}')
    if c:
        res = c.bcast(res, root=0)
    print(f'fn {fn.__name__} RTN {res} FOR RANK {r}')
    return res

print('READY TO TURN ON MPI')
_run_fn(_radia_mpi(True), run_once=False)
g_id, id_map = _run_fn(_build_radia_geom, run_once=False)
_run_fn(_write_geom(g_id, id_map))

#id_map = PKDict()
{% if isExample %}
#g_id = radia_examples.EXAMPLES['{{ geomName }}']()
{% elif dmpImportFile %}
#with open('{{ dmpImportFile }}', 'rb') as f:
#    b = f.read()
#    g_id = radia_tk.load_bin(b)
{% else %}
#for obj in sirepo_objs:
#    o = PKDict(obj)
#    if o.model not in _MODELS or o.id in id_map.values():
#        continue
#    o_id = _add_object(o)
#    id_map[o_id] = o.id
# put all objects in a container for now
#g_id = radia_tk.build_container(radia_objs)
#id_map[g_id] = '{{ geomId }}'
{% endif %}


#g_data = radia_tk.geom_to_data(g_id, name='{{ geomName }}')
#with h5py.File('{{ dataFile }}', 'a') as hf:
#    template_common.dict_to_h5(g_data, hf, path='{{ h5ObjPath }}')
#    template_common.dict_to_h5(id_map, hf, path='idMap')

{% if doSolve %}
#res = radia_tk.solve(g_id, {{ solvePrec }}, {{ solveMaxIter }}, {{ solveMethod }})
res = _run_fn(_do_solve(g_id, {{ solvePrec }}, {{ solveMaxIter }}, {{ solveMethod }}), run_once=False)
_run_fn(_write_solution(res))
#with h5py.File('{{ dataFile }}', 'a') as hf:
#    template_common.dict_to_h5(res, hf, path='{{ h5SolutionPath }}')
{% endif %}


{% if viewType == VIEW_TYPE_FIELD %}
{% if fieldType == FIELD_TYPE_MAG_M %}
f = radia_tk.get_magnetization(g_id)
{% elif fieldType in POINT_FIELD_TYPES %}
f = radia_tk.get_field(g_id, '{{ fieldType }}', {{ fieldPoints }})
{% else %}
f = None
{% endif %}
if f:
    g_data = radia_tk.vector_field_to_data(g_id, '{{ geomName }}', f, radia_tk.FIELD_UNITS['{{ fieldType }}'])
    _run_fn(_write_fields(g_data))
#    with h5py.File('{{ dataFile }}', 'a') as hf:
#        template_common.dict_to_h5(g_data, hf, path='{{ h5FieldPath }}')
{% endif %}


_run_fn(_write_dmp(g_id))
print('READY TO TURN OFF MPI')
#_run_fn(_radia_mpi(False), run_once=False)

#with open('{{ dmpOutputFile }}', 'wb') as f:
#    f.write(radia_tk.dump_bin(g_id))
