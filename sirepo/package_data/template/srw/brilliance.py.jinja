#!/usr/bin/env python

import srwlib
from sirepo.template.srwl_uti_brightness import SRW_flux_energy

def main():
    lam_u = {{ undulator_period }} * 100.0 # undulator.period in cm
    nPer = int({{ undulator_length }} / {{ undulator_period }}) # undulator.length / undulator.period
    columns = []
    header = []

    for harmNum in range({{ brillianceReport_initialHarmonic }}, {{ brillianceReport_finalHarmonic }} + 1):
        if harmNum % 2:
            header.append('f{} [Ph/s/0.1%bw], e{} [eV]'.format(harmNum, harmNum))
            (x, y) = SRW_flux_energy(
                {{ electronBeam_current }}, # electronBeam.current
                {{ undulator_horizontalDeflectingParameter }}, # undulator.horizontalDeflectingParameter
                {{ undulator_verticalDeflectingParameter }}, # undulator.verticalDeflectingParameter
                {{ brillianceReport_minDeflection }}, # brillianceReport.minDeflection
                {{ brillianceReport_energyPointCount }}, # brillianceReport.energyPointCount
                {{ electronBeam_energy }}, # electronBeam.energy
                lam_u, # undulator period in cm
                {{ undulator_horizontalInitialPhase }}, # undulator.horizontalInitialPhase
                {{ undulator_verticalInitialPhase }}, # undulator.verticalInitialPhase
                harmNum,
                nPer,
                {{ brillianceReport_detuning }}, # brillianceReport.detuning
                {{ electronBeam_rmsSpread }}, # electronBeam.rmsSpread
            )
            columns.append(x.tolist())
            columns.append(y)

    srwlib.srwl_uti_write_data_cols('res_brilliance.dat', columns, '\t', '#' + ', '.join(header))
