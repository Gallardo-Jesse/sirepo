

from keras.models import Sequential
from keras.layers import Dense, GaussianNoise

layers = [10, 20, 20, 20, 10]
activation_function = 'relu'

model = Sequential()
for i in layers:
    model.add(Dense(i, activation=activation_function))
    model.add(GaussianNoise(0.01))
model.add(Dense(y_train.shape[1], activation='linear'))
model.compile(loss='mean_squared_error', optimizer='adam')

class TrackStatus(keras.callbacks.Callback):
    def on_train_begin(self):
        pass

    def on_epoch_end(self, epoch, logs={}):
        pass

model.fit(
    x=x_train, 
    y=y_train,
    validation_data=(x_validate, y_validate),
    batch_size=50,
    shuffle=True,
    epochs=500,
    verbose=False,
    callbacks=[TrackStatus()],
)
